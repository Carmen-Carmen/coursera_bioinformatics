import os
import datetime
import pyperclip

# find the count of times a pattern appears in a string
def pattern_count(text, pattern): 
    count = 0
    len_pattern = len(pattern)
    for i in range(0, len(text) - len_pattern + 1):
        if text[i: i + len_pattern] == pattern:
            count += 1
    return count

# find the most frequent k-mers in a string
# O((n-k)^2 * k) time complexity
def frequent_words(text, k):
    frequent_patterns = []
    pattern_counts = []

    for i in range(0, len(text) - k):
        pattern = text[i : i + k]
        pattern_counts.append(pattern_count(text, pattern))
    max_count = max(pattern_counts)

    for i in range(0, len(text) - k):
        if pattern_counts[i] == max_count:
            frequent_patterns.append(text[i : i + k])

    # remove duplicates
    results = set(frequent_patterns)
    return list(results)

# implements key-val pairs data structure called map
# far quicker than the previous frequent_words which only implements array
def better_frequent_words(text, k): 
    frequent_patterns = []
    freq_map = get_frequency_table(text, k)
    max_count = max_map(freq_map)
    for pattern in freq_map.keys():
        if freq_map[pattern] == max_count:
            frequent_patterns.append(pattern)

    # print("max count:", max_count)
    return frequent_patterns

def get_frequency_table(text, k):
    freq_map = {}
    for i in range(0, len(text) - k):
        pattern = text[i : i + k]
        if pattern in freq_map.keys():
            freq_map[pattern] += 1
        else: 
            freq_map[pattern] = 1
    
    return freq_map

def max_map(d):
    if d.values() == None: 
        return None
    else:
        values = list(d.values())
        max_val = values[0]
        for i in range(0, len(values)):
            if values[i] > max_val:
                max_val = values[i]
        return max_val
    
def get_complement_strand(s):
    l = len(s)
    result = ""
    for i in range(0, l):
        base = s[i: i + 1]
        if base == "A":
            result += "T"
        elif base == "T":
            result += "A"
        elif base == "C":
            result += "G"
        elif base == "G":
            result += "C"
    
    return result

def get_reverse_strand(s):
    l = len(s)
    result = ""
    for i in range(0, l):
        result += s[l - i - 1 : l - i]
    
    return result

# given a text and a pattern, return all the indice that the specific pattern appears
def find_pattern_index(text, pattern):
    indice = []
    for i in range(0, len(text)):
        if pattern == text[i : i + len(pattern)]:
            indice.append(i)
    
    return indice

# find k-mer patterns which can form a clumps 
# in a substring of text with length L 
# and the pattern appears more than t times
def find_clumps(text, k, L, t):
    # method 1
    # FindClumps(Text, k, L, t)
    #     Patterns ← an array of strings of length 0
    #     n ← |Text|
    #     for every integer i between 0 and n − L
    #         Window ← Text(i, L)
    #         freqMap ← FrequencyTable(Window, k)
    #         for every key s in freqMap
    #             if freqMap[s] ≥ t
    #                 append s to Patterns
    #     remove duplicates from Patterns
    #     return Patterns
    # patterns = []
    # n = len(text)
    # for i in range(0, n - L):
    #     window = text[i: i + L]
    #     # print("current slice [%d : %d]" %(i, i + L))
    #     freq_map = get_frequency_table(window, k)
    #     for pattern in freq_map:
    #         if freq_map[pattern] >= t:
    #             patterns.append(pattern)
    # # remove duplicates from patterns
    # patterns = set(patterns)
    # return list(patterns)

    # method 2
    # patterns = set([])
    # freq_map = get_frequency_table(text, k)
    # for i in range(0, len(text) - L):
    #     window = text[i: i + L]
    #     print("current slice [%d : %d]" %(i, i + L))
    #     for pattern in freq_map.keys():
    #         if (pattern in window) and (freq_map[pattern] >= t):
    #             patterns.add(pattern)
    # return patterns

    # method 3, fastest!!
    patterns = []
    # 形成类似于链表的数据结构，key是pattern，value是一个数组，记录了这个pattern在基因组中所有出现的索引
    # pattern : [index1, index2, index3...]
    pattern_indices = {}
    for i in range(0, len(text) - k):
        pattern = text[i : i + k]
        if pattern not in pattern_indices.keys():
            pattern_indices[pattern] = [i]
        else :
            pattern_indices[pattern].append(i)

    for pattern, indices in pattern_indices.items():
        # 遍历indices数组
        for i in range(0, len(indices)):
            count = 0
            # 以indices[i]作为起点，看之后的每个indeces[j] + k是否落在长度为L的区间内
            for j in range(i, len(indices)):
                if indices[j] + k <= indices[i] + L:
                    count += 1
                else:
                    # 超出区间了，遍历下一个i
                    break

            if count >= t:
                patterns.append(pattern)
                break

    return patterns

if __name__ == "__main__":


    # with open("./Vibrio_cholerae.txt", "r") as f:
    #     # text = f.read()
    #     text = "atcaatgatcaacgtaagcttctaagcatgatcaaggtgctcacacagtttatccacaac ctgagtggatgacatcaagataggtcgttgtatctccttcctctcgtactctcatgacca cggaaagatgatcaagagaggatgatttcttggccatatcgcaatgaatacttgtgactt gtgcttccaattgacatcttcagcgccatattgcgctggccaaggtgacggagcgggatt acgaaagcatgatcatggctgttgttctgtttatcttgttttgactgagacttgttagga tagacggtttttcatcactgactagccaaagccttactctgcctgacatcgaccgtaaat tgataatgaatttacatgcttccgcgacgatttacctcttgatcatcgatccgattgaag atcttcaattgttaattctcttgcctcgactcatagccatgatgagctcttgatcatgtt tccttaaccctctattttttacggaagaatgatcaagctgctgctcttgatcatcgtttc"
    #     start = datetime.datetime.now()
    #     # for pattern in frequent_words(text, 9):
    #     #     print(pattern)
    #     for pattern in better_frequent_words(text, 9):
    #         print(pattern)
    #     end = datetime.datetime.now()
    #     print("runtime: %dms" % ((end.microsecond - start.microsecond)//1000) )
    
    # with open("./dataset_3_2.txt", "r") as f:
    #     text = f.read()
    #     print(get_reverse_strand(get_complement_strand(text)))
        
    # with open("./dataset_3_5.txt", "r") as f:
    #     pattern = "CGCTAGTCG"
    #     text = "CGCTAGTGCGCTAGTGTGACAGCGCTAGTAAGACGCTAGTATCGCTAGTAACGCTAGTTCCGCTAGTTCCGCTAGTCGCTAGTCGCTAGTTATCGCTAGTCTTCGACCAAGGGCGCTAGTTCGCTAGTCGCTAGTTCGCTAGTAAACGCTAGTTCGCTAGTCGCTAGTTTTCCCGGGATTTTCGCTTCGCTAGTCGCTAGTCGCTAGTTCGCTAGTGCCCCGCTAGTTGCCCCCGCTAGTCGCTAGTCGGCCGCTAGTCGAGATCTGCCAACTGTGGGGCCGCTAGTCGTGCACGCTAGTCCCCGCTAGTACGCTAGTCGCTAGTGCGCTAGTTACGCTAGTTCTCGCTAGTGGCGCTAGTCGCTAGTAGGTCGCTAGTATTACGCTAGTCCGCTAGTACGCTAGTGAGTACGTCCGCTAGTCCGCTAGTACGCTAGTTCCCCGCTAGTCCAGCCGCTAGTCCGCTAGTCGCGCTAGTTATAGTACTCCGCTAGTCGCTAGTCGCTAGTTGGCCCGGCGCTAGTGCGCTAGTGTCCGCTAGTTCCGCTAGTTAATTGTGTGCGGTGTAGTCGCTAGTAATTTGTGCGCTAGTCCGCTAGTCGCGCTAGTCGCTAGTACGCTAGTCGCTAGTGGCGCTAGTCGCTAGTAATTTTGCGCTAGTTCCCGCTAGTCGCTAGTCCGCTAGTTCGCTAGTCGCTAGTACGCTAGTTACCCGCTAGTGCGCTAGTAGGCTCGCTAGTCGCTAGTCCGCTAGTGCCCACGCTAGTCGCTAGTCGCTAGTTCGCTAGTCGCTAGTCGCTAGTTCCGCTAGTCTGCGCTAGTGGACGCTAGTTCGCTAGTTGTCGCTAGTGCGCTAGTAGGCGCTAGTACGCTAGTCACACGCTAGTGCGCTAGTCCGCTAGTCCACGCTAGTTAATGCCGCTAGTCAGCCGCTAGTACTTCAATCAAGGAATCGCTAGTTCGCTAGTAGGCGCTAGTCGCTAGTGCGCGCTAGTCCTGCGCTAGTTACGCTAGTAACACGCTAGTGCGCTAGTGGGAATCGCTAGTCGCTAGTCACGCTAGTCCCGCTAGTAACCGCTAGTGCCGCTAGTCGCTCACGCTAGTCGCTAGTTGATTACGCTAGTATCGCGCTAGTACGCTAGTAACGCGCTAGTCGCTAGTACGCTAGTAATGCGCTAGTCGCTAGTACCGCACGCTAGTCGCTAGTCCGCTAGTTCTCGCTAGTACGCTAGTAACGCTAGTAGCGCTAGTGTGAGCGCTAGTTGCGGCCGCTAGTGAAGACGCTAGTCACGCTAGTCGCTAGTCGCTAGTCGCTAGTCGCTAGTCGCTAGTCAACTCCGCTAGTCCATTTCGCTAGTCGCTAGTCAGATCATAGAGAACGCTAGTCGCTAGTGCTAAAACGCTAGTACGCTAGTTGTCGCTAGTACGCTAGTGCGCTAGTAGTATACGCTAGTAACGCTAGTTGCGCTAGTCGCTAGTCCGCTAGTCGCTAGTACCCTGAAAATCCGCTAGTCGCTAGTCGCACGACCGCTAGTCTCAAAGCGCTAGTAATACGCTAGTCGCTAGTGAGAAACGCTAGTCCCACCGCTAGTTACTGGATTTCGCTAGTACCGCTAGTCCGCTAGTCCGCTAGTCGCTAGTTTCGCTAGTGGAACGCTAGTCAAGTATCGCTAGTCCGCTAGTCCCGCTAGTGGCGTTCGCTAGTTATGGATAGGCGCTAGTCGTCCCTCCGCTAGTACGCTAGTGCGTAAATACGCTAGTCGCAGCGCTAGTAGGTAGCGCTAGTTAAGCGCTAGTCGCTAGTCAAACGCTAGTACCGCTAGTGACGCTAGTCACGCTAGTGACGACGCTAGTGCGCTAGTACGACTATTAACGCTAGTCGCTAGTCGCTAGTACGCTAGTGCGACGCTAGTCGCTAGTCCGCTAGTTAAATATCGCTAGTGCGCTAGTCCGCTAGTCGCGCTAGTCACGCTAGTCGCTAGTCGCTAGTCGCGCTAGTCACCGCTAGTGCGCGCTAGTGTGAAGCAAGCCGCTAGTGCGCTAGTACCGCTAGTTCGACGCTAGTCGCTAGTATATCGTTCGCTAGTGTCCGCTAGTGCGCTAGTATTACTCGCTAGTTCGCTAGTCGCTAGTATAAATGTCATCACGCTAGTCTAGTAACGCTAGTGTTGGCTCGCTAGTGTCGCTAGTAGCGCTAGTCGCTAGTAACCGCTAGTCGCTAGTACGCTAGTTAACGCTAGTTAGCACTTCGCTAGTCGCTAGTCCGCTAGTCGCTAGTGGGCACGCTAGTTCGCTAGTTTGGCCGCTAGTTCGCTAGTACGCTAGTCGCTAGTGTGCCGCTAGTGAGCGCTAGTACGCTAGTCCGTGGACGCTAGTCGCTAGTTCGCTAGTTATACGCTAGTAAGTCGCTAGTGATGACACGCTAGTCGCTAGTCGCTAGTCGCTAGTCATAGATGTGCGCTAGTACGTCCGCTAGTGCGTCGCTATGCGCTAGTACGCTAGTTCACGCTAGTCGCTAGTCGCTAGTGCGCTAGTCCGCTAGTACGTACCGCACATAGAGGTTCCGCTAGTGGATTACGCTAGTGGTAATGCCGCTAGTCGCTAGTCCGCTAGTCGCTAGTACCACGCTAGTCGCTAGTCGCTAGTGCGCTAGTACGCTAGTTCCCCGCTAGTCGATCCGCTAGTCGCTAGTCGCTAGTCGCTAGTTCGCTAGTTGCCGCTAGTGGAGTTAAAGCGCTAGTCGCTAGTTCGACGCGCTAGTACGACGCTAGTATATCCATTTCGCTAGTACGCTAGTGCCGCTAGTCCGCTAGTAAGCTACGCTAGTGCAGTGCGCTAGTTTCGCTAGTATCGCTAGTCTCCGCTAGTGGCGCTAGTTCGCTAGTAGAAGATCCGCTAGTGGCTCGCTAGTCGCTAGTCAGCGCGCGCTAGTCGCTAGTGGCGCTAGTCTACGCTAGTACGCTAGTCGCTAGTGCGCTAGTCGCTAGTAATACGCTAGTCAAGCCGCTAGTACGCTAGTCGCTAGTCGCTAGTCCGCTAGTCGCTAGTCGCTAGTATTCGCTAGTTCGCTAGTCGCTAGTCGCTAGTCGCTAGTGTGTGTCGCTAGTACGCGCTAGTCGCTAGTTCGAGGTCGCTAGTCGCTAGTGTTGAGCCGCTAGTCGCTAGTACGTCGCTAGTGCCCGCGTGCCAATCGAAGCATACGCTAGTATTCGCTAGTCGCTAGTTCGCTAGTGCGTTCGCTAGTCGCTAGTCCGGTGACGCTAGTGCATCGCTAGTCGCTAGTTTCGCTAGTGACGCTAGTCGGCGCTAGTCGCTAGTTCACGCTAGTCGCTAGTAACGCTAGTCGCTAGTCGCTAGTAGCTAGTGTTGGCGCTAGTCCGCTAGTAGCGCTAGTTCGCTAGTACAATCGCTAGTCACACATCGCTAGTGCGCTAGTCCGCTAGTACTACGCTAGTTCCCCGCTAGTCGCTAGTCGCTAGTTAGCGCTAGTCAGAACGCTAGTGACGCTAGTATCGCTAGTCGCTAGTCCGCTAGTGTCTATCCCGCTAGTCGCTAGTCACGCTAGTCCACACGCTAGTGCTAAACCGCTAGTTCGCTAGTTGCCGCTAGTGAGTACGCTAGTGCCGCTAGTCGCTAGTTGCGCTAGTCGCTAGTCGTCGCTATTACGCTAGTGCCCGCTAGTACCGCTAGTCGACGCTAGTTTGACGCTAGTCCTCCCGAGATCCGCTAGTCGCTAGTCCGAGCGCTAGTTCTACTCAGTCCTTCACGCTAGTGCGCTAGTCGCTAGTACCCCGCTAGTCGCTAGTCCGCTAGTGCGCTAGTCCGCTAGTCGCTAGTCGCTAGTAACCGATTCCGCGGAGTGATCGCTAGTTACCGCTAGTCCGCTAGTACCGCGCTAGTCTGTCGCTAGTCGCTAGTTCACGCTAGTGTCGCTAGTCGCTAGTTACCACCAAATGTTTGGAGCTACGCTAGTATCGCTAGTCGCTAGTAGACGCTAGTCGCTAGTCGCTAGTCGCTAGTCCGCTAGTGGCGCTAGTGACCGCTAGTTCGCTAGTCGCTAGTGCGCTAGTGCGCTAGTCGCTAGTGCGCTAGTAGGTTCCCCACGCTAGTCGCTAGTTCGCTAGTCGCTAGTATCGCTAGTGGGCGCTAGTACGCTAGTCGCTAGTCGCTAGTCGGCGCTAGTCTCGCAATTTCGCTAGTACGCGCTAGTCGCTAGTGTAATCTGCGCTAGTACGCTAGTTGCCGCTAGTCCGCTAGTCGCTAGTTCCGCTAGTTGCGCTAGTGACGCTAGTAAGCCGCTAGTCGCTAGTACAGCCGCGCGCTAGTCGCTAGTGACTTGCGCTAGTCGCTAGTTTCGCTAGTCGGCGCTAGTTGTACGCTAGTCGCTAGTCGCTAGTCGCTAGTCGCTAGTCGCTAGTCACGCTAGTCGCCGCTAGTTGACTCTCGCTAGTGCGCTAGTCGCTAGTCGCTAGTATCGCTAGTGACCGCTAGTCGCTAGTAGTTGTCGCTAGTCACCGCTAGTATCGCACCGCTAGTTGCGCTAGTCGCTAGTCGCTAGTGACGCTAGTCGCTCCGCGCTAGTACGCTAGTCGCTAGTTTTCGCTAGTCTCGCTAGTTCGCTAGTCGCTAGTTGTGTCGCTAGTGCCGCTAGTGCAGGCCGCTAGTGCGCTAGTTACGCTAGTCGCTAGTAGCGCTAGTCGGAGTTACGCTAGTACGTGCGGCGCGCTAGTACGCTAGTAACTCGCTAGTCGCTAGTCGCTAGTTAAGGCGCTAGTCGCTAGTCGCTAGTCAATTGGCCGCTAGTCGCTAGTCGCTAGTCGCTAGTACCGCTAGTAAACCGCTAGTGCGCTAGTCGCTAGTCGGACACTGCGCTAGTCGCTAGTACACGCTAGTCGCTAGTGTTATGTCGCTAGTTCGCTAGTTCTCTATTACGCTAGTGGACCAGCGCTAGTCGCTAGTCGCTAGTGCCGCTAGTGTCGCTAGTTCGCTAGTGCGCTAGTCTGTCGCAACGCTAGTCGCCAGCGCTAGTGTGGGCGCTAGTTTCGCTAGTCGCTAGTGCGCTAGTCGCTAGTCCGCTAGTCCCGCTAGTACGCTAGTCATCGCTAGTGCGCTAGTAGCGCTAGTCGGTGTCGCTAGTCGCTAGTGCCGCTAGTAATCGCTAGTCGAAACCGCTAGTGCGCTAGTCGCTAGTGATCGCTAGTCGACGCTAGTCGCTAGTTGCCAGCGCGCTAGTCACGCGCTAGTCGCTAGTCGCTAGTACGCGCTAGTCCGCTAGTAAGCGCTAGTCGCTAGTACCCGCTAGTTGCGCTAGTGCGCTAGTCGCTAGTGCCCGGTCGCTAGTCGCTAGTACGCTAGTAACCCGCTAGTGCGCTAGTCGCTAGTCGCTAGTCGCTAGTCGCTAGTGGACGCTAGTATCGCTAGTCGCTAGTCGCTAGTACGCTAGTCGCTAGTTCGCTAGTGGCGCTAGTCTACAGCGCTAGTCGCTAGTCTGGGTCCTCCGCTAGTACGCTAGTTAATAACGCTTCGCTAGTTGGCTAAGGTTTTCGCTAGTAATCGCTAGTCGCTAGTTACGACGCTAGTGTTTACCTCGCTAGTGCAACCATCGCTAGTCGTTACCCGCTAGTTACGCTAGTTCGCTAGTCGCTAGTCGTCCGCTAGTATCGCTAGTCGAGCACAACCGAGCGCTAGTTCCCGCTAGTCGCTAGTGACGCTAGTCGCTAGTCACGCTAGTAAGCGCTAGTCCGCTAGTGCTCGCTAGTCGCGCTAGTCTCGTACATCCGCTAGTGCCAACGCTAGTCCGCTAGTCCTCCGCTAGTCGCTAGTCGCTAGTGAAGCGGCGCTAGTACGCTAGTCCCGCTAGTAACGGCGCTAGTGACGCTAGTCGCTAGTGCCGCTAGTCGCTAGTTCGCTAGTACTTTACCGCTAGTATCTAATCGCTGCGCTAGTGAACTGTCGCTAGTCGCTAGTATATCGCTAGTGACGCTAGTAAGCGCTAGTCTAAGTGTCTCCTATCGACGCTAGTCAGCGCTAGTCGCTAGTAGCGCTAGTACGCTAGTTGATGCAACGCTAGTTATGTGCGCTAGTACGCGCTAGTACATGACGCTAGTCCGCTAGTCTGACGCTAGTAACGCTAGTCGCTAGTCGCTAGTACGCTAGTCCCGCTAGTCCCGTCGCTAGTCGCTAGTCGACGCTAGTCGCTAGTCATCACACGCTAGTGCGCTAGTGCTCGCTAGTGGATACGCTAGTCGCTAGTGTTTTCGCTAGTTAAAAGCGGATCGCTAGTGCACGCTAGTCGTTTCGCTAGTAGCGCTAGTAACCGCTAGTCGCTAGTCGCTAGTTCGCTAGTCGCTAGTCTTGTACGCTAGTCCGCTAGTCGCACGCTAGTTCGCTAGTCGCTAGTGAGGACGCTAGTCGCTAGTCGTATCGCTAGTCGCTAGTGTAGGGGAAGCGCTAGTCGCTAGTAATAGCGCTAGTCCGCTAGTAACGCTAGTGGGCGCTAGTGGTAACCTCGCTAGTCTCGCTAGTCGCGCTAGTCCGCTAGTTCGCTAGTATCGCTAGTCCGCTAGTCGCTAGTTAAGTAACGCTAGTCGCTAGTCAGATGTACAGCCGCTAGTAGCCTCGGTACGCTAGTTTCGCTAGTCGCTAGTTACCGCTAGTGGGACGCTAGTAAAACGCTAGTTGCACGCTAGTATACCTTTCGCTAGTTTTCGCTAGTCGCTAGTCGCTAGTGCCGCTAGTATTACGCTAGTCTTCGCTAGTTAGACGCTAGTTACCGATCGCTAGTACAACCGCTAGTCGCTAGTCGCTAGTTCGCTAGTGCCTGGCGCTAGTAGCCGCTAGTCGCTAGTCCTCGCTAGTCGCTAGTACGCTAGTCGCTAGTCCCGCGCTAGTAGTAGCGCTAGTCGCTAGTCGCTAGTCGCTAGTCGCTAGTGACTCGCTAGTGGCACGCTAGTTAGACGCTAGTACGCTAGTCGCTAGTCGCTAGTTCCGCTAGTCGCTAGTGCACGCTAGTGCCCCGCTAGTCGCTAGTACGCTAGTGAGACGCTAGTCAACCGCTAGTGGCCAAACCGCTAGTCGCTAGTTCGCTAGTCATGCATTCGCTAGTCTGCGCTAGTTACGCTAGTATCGCTAGTCACAGGTTACGCTAGTCTGCGCTAGTGCGCTAGTCGCTAGTGTCGCTAGTCGCTAGTTCCCACGCGCTAGTCGGCGCTAGTCGCTAGTGCCGCTAGTGGGGGCAACGCTAGTCGCACCGCTAGTTTCGCTAGTAAGTCGCTAGTCCGACGCTAGTCGCTAGTACGCTAGTCGCTAGTTGCGCTAGTCGCTAGTGGAGCGCTAGTTACGCTAGTCGCTAGTCGCTAGTCGCTAGTGTTGAACGCTAGTACGCTAGTCAGCGGCGCATTACGCTAGTCCGCTAGTCGCTAGTGCCGCTAGTCGCTAGTGGTAGGCGCATTAGCGCTAGTCGCTAGTCGCTAGTCGCTAGTGTGCCGCTAGTTGGCGCTAGTTGACGCTAGTCGACGCTAGTCGCTAGTCGCTAGTATTCGCTAGTCGGACGAGCCGCTAGTCCGCTAGTTGCGCTAGTCCACGCTAGTTGATGCGCTAGTACGCTAGTCGCTAGTGCCCGCTAGTTTTTCCGCTAGTGCTCGCTAGTGGTCGCTAGTCCGCTAGTGGCCGCTAGTCACGCTAGTACGCGCTAGTCCACGCTAGTTGATTCGCTAGTCTCGCTAGTGGCGCTAGTTCGCTAGTCGCTAGTGAGAACGCTAGTTCCGCTAGTGACAGCGCTAGTCGCTAGTGCGCTAGTTCTCGCTAGTCGCTAGTCCGCCGCTAGTAACCGCTAGTCGCTAGTACGCTAGTGGTATCGCTAGTGCGCTAGTCTCGCTAGTTTCGTCACCGCTAGTAGCCGCTAGTGTTAAATCATTGCGCTAGTCCGCTAGTCTCGCTAGTTCGCTAGTCGCTAGTAAAGCCGCTAGTCGCTAGTCTACGCTAGTACATTGCCGCTAGTCGCTAGTCGGCGCTAGTCCCGCTAGTCGCTAGTGCCGCTAGTATTTGAAGGCAAACGAGCGCTAGTAGGGGAACTCACCGCTAGTTCCGCTAGTGAAAATCGCTAGTCGCTAGTAACCGCTAGTAACGCTAGTCGCTAGTCGCTAGTCGCTAGTCGCTAGTCGCTAGTCT"
    #     result = ""
    #     print(pattern)
    #     print(text)
    #     for i in find_pattern_index(text, pattern):
    #         result += str(i) + " "
    #     print(result)

    # with open("./Vibrio_cholerae.txt", "r") as f:
    #     pattern = "CTTGATCAT"
    #     text = f.read()
    #     result = ""
    #     for i in find_pattern_index(text, pattern):
    #         result += str(i) + " "
    #     # print(result)
    #     pyperclip.copy(result)

    # dataset_4_5.txt
    # text = "TTTCCACCGTGGTCTTTGGTCGTGGTCTTGGTCTTGTAAGATAATGCGCTCTACTACACCAGTGCTTTAGGATTCCTCACAACGGTGTGCCAGGTTCCATGCCAGGTTTGCTTTGCTACAGGATTCCGAGCCGTCCAAAACAGTGAGTACGCCAAACCGTATCATTCGGATTCTATAAAAATGGTAAATAAAATAGGTCTGATTTGGCGTGTTCAATCGTATGCACAGGCCTATCCTATTGGCACCCCTATTGGCACATTAGCGGGGGACACTGATCCTGTAGATAATGAGAGATAATGAGAGAGCTGCTATAGAGCTCCCGCTATTAACAGCGTCCAACCCCACCTCTTCTGGGCACGCCTGACGTTGTGGCGGACGGCCTGTCACTCGGTTGACCTCGAACAATATGGTGTTGTTGGCGTCACGATCGCGTGTAATAAATAATATAATGACAATAATAATGACAAAATACACGTATCTCAGTCCTGAAACTCTTGACTAGAATTTTTATTTTTAAAATTTCCCTCGTACAGGACGCTTGAAGAGCTCGGGAACCGACTCACGAATCTGTATTACACCCGCTCCTTTCTAGCCTTCTTTATCGCAAGCTCAGATCCAAGGGGTTAATGGCAAGCGTAGGTGATATATAGCTTGACAACTCCAAAGTTCCTGCTGCAATTACATCCATCAACGGTTGGACATTAATGTTCTCCGTCCCGTCCGTCGACGCGGGAGCATGTGTAGCGAGGCACGACGTGGTTTCGTGGCCTTACAAACGCACGTACCAAAGTCCTTCTCGAATTTCGCTAGCATTCTCAAAGGGTAATAGCCGAGTCTCACACATTTCAGACTCTGGAGACTTTCCTTGCATCGCGCCCAACAAGACTTAGATCTAACTGCCTCGAAGGTCTGCTAGACGAGTAACACCCAAGACTGATGATTCAATTCAGGATCATAAGAAGTCCTTGGGTCTGGGGCAGTTTAGGGCACGGGGCCTTGAAAGGTCTAGGATAGTGATTGAGCCCCGTCGCTGTCCGGAAGATCACTGTGCCTTTGAGTCGCTTTCCTTGGAAGCTCCTTTATCATCAATGGCGCATCGCATCCTTTGAATGGGGATTTTTCTGTTTGCTGCTGATCAGCGCCATGGGCCGTGCTAGTAAAGCTCTATTTATCGCTCCTACGTCGGCCTCTGTACTACAGTCCCATGTCAGGTGTCGGGTTGGAGCAAACGTCGGTTATTTCTAAGTGACTTCAGAAAATCCTCTTGCCACCTATTACACCGTCTCGCAACAAAAAAAGGCCCGGAAAGGCCCGAAGCCGAAGATTACGGCGTTTAACTTAGGCGACATCATCATAAGTTCCGGCACCATCCAGCCGGTGAAGTGGCTTCTCAACGGAGTCTATCCATTGTACTACGGACGCAAAGCTCGTAGTCAACGACGAGCCCTACGTGTAGTTCGTTAAGATGGCGATCGCTGCCCCGCCTCGACGCCTCCGCCTCGAGAGCTACTTAGGAGGTTGCCAACTTACGAGAGAGGGTTCATAACTGAGCCGTATGGACCAAGCTAGTCGCTTTTAGATCCCCTATCGTCTTTTTCTGTTTACATCCTGAGAGATCCCAGGATGAGAGAGATGAGAGAGAGAATGAGAGAGTATAATCGATTAGAAGGGACGCGAACGATGGGGAATAGTCAATGTTTACGTAGGCGGACATACACTACCACTTGTCCGTCCATCCTGCAGTCAGGTCCGACTGATGCGCGTAATACGGGTATGTTAACCGGGCACGCATTGAGTGCTCGCTATGCTCGCTCGCTATGCGCTCGCTGGCTCGCTATGTTTGCAGGGTTTGCAGGGTTTGCAGGGTTTGCAGGGTTTGCAGGGTTTGCAGGGTTTGCAGGGTTTGCAGG"
    # k = 5
    # L = 29
    # t = 4
    # result = ""
    # for pattern in find_clumps(text, k, L, t):
    #     result += pattern + " "
    # print(result)

    # with open("./E_coli.txt", "r") as f:
    #     text = f.read()
    #     k = 9
    #     L = 500
    #     t = 3

    #     print(len(find_clumps(text, k, L, t)))

    # Quiz
    # text = "CGCGATACGTTACATACATGATAGACCGCGCGCGATCATATCGCGATTATC"
    # pattern = "CGCG"
    # print("count:", pattern_count(text, pattern))

    # text = "CGGAGGACTCTAGGTAACGCTTATCAGGTCCATAGGACATTCA"
    # print("most frequent 3-mer:", better_frequent_words(text, 3))

    # text = "GCTAGCT"
    # print(get_reverse_strand(get_complement_strand(text)))

    text = "ATGACTTCGCTGTTACGCGC"
    pattern = "CGC"
    result = ""
    for i in find_pattern_index(text, pattern):
        result += str(i) + " "
    print(result)

    # with open("E_coli.txt", "r") as f:
    #     text = f.read()
    #     k = 7
    #     print(better_frequent_words(text, k))